import unittest
from math_quiz import generate_random_integer, generate_random_operator, create_problem

class TestMathGame(unittest.TestCase):
    """
    A test case class for the Math Quiz functions.
    """

    def test_generate_random_integer(self):
        """
        Test the generate_random_integer method.

        Test if random numbers generated by generate_random_integer are within the specified range.

        This test iterates over a large number of random values to ensure the correctness
        of the generated random integers within the specified range.
        """
        # Test if random numbers generated are within the specified range
        min_val = 1
        max_val = 10

        for i in range(1000):  # Test a large number of random values
            #Create a random integer with generate_random_integer function
            rand_num = generate_random_integer(min_val, max_val)

            #Check if its within the range
            self.assertTrue(min_val <= rand_num <= max_val)

    def test_generate_random_operator(self):
        """
        Test the generate_random_operator method.

        This test iterates over a large number of random values to ensure that the result
        of generate_random_operator is one of the specified mathematical operators: '+', '-', or '*'.
        """
        # Test a large number of random values
        for _ in range(1000):
            #Create a random operator with generate_random_operator function
            result = generate_random_operator()

            #Check if operators are from the list specified below
            self.assertIn(result, ['+', '-', '*'])

    def test_create_problem(self):
        """
        Test the create_problem method.

        This test evaluates create_problem with specific input values and checks if the returned
        problem string and answer match the expected values. It uses subtests to provide
        detailed information about individual test cases.
        """
        #Test cases to test the validity of create_problem function
        test_cases = [
            (5, 2, '+', '5 + 2', 7),
            (8, 3, '-', '8 - 3', 5),
            (4, 6, '*', '4 * 6', 24),
            (10, 2, '+', '10 + 2', 12),
            (7, 4, '-', '7 - 4', 3),
            (3, 5, '*', '3 * 5', 15),
            (15, 3, '+', '15 + 3', 18),
            (9, 2, '-', '9 - 2', 7),
            (6, 2, '*', '6 * 2', 12),
            (12, 4, '+', '12 + 4', 16),
            (8, 2, '-', '8 - 2', 6),
            (5, 3, '*', '5 * 3', 15),
            (20, 4, '+', '20 + 4', 24),
            (10, 5, '-', '10 - 5', 5),
            (7, 3, '*', '7 * 3', 21),
        ]

        #Loop through the test_cases array
        for num1, num2, operator, expected_problem, expected_answer in test_cases:

            with self.subTest(num1=num1, num2=num2, operator=operator):
                #Calling the create_problem function
                problem, answer = create_problem(num1, num2, operator)

                #Checking if the problem and answer created by create_function is equal to the expected values in the test_cases
                self.assertEqual(problem, expected_problem)
                self.assertEqual(answer, expected_answer)

if __name__ == "__main__":
    unittest.main()